{"ast":null,"code":"import { uiActions } from \"./ui-slice\";\nimport { cartActions } from \"./cart-slice\";\nconst URL = 'https://react-http-bc15f-default-rtdb.firebaseio.com/cart.json';\nexport const fetchCartData = () => {\n  return async dispatch => {\n    const fetchData = async () => {\n      const response = await fetch(URL);\n\n      if (!response.ok) {\n        throw new Error('Could not fetch cart data!');\n      }\n\n      const data = await response.json();\n      return data;\n    };\n\n    try {\n      const cartData = await fetchData();\n      dispatch(cartActions.replaceCart({\n        items: cartData.items || [],\n        totalQuantity: cartData.totalQuantity\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Sending cart data failed!'\n      }));\n    }\n  };\n};\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: 'pending',\n      title: 'Sending...',\n      message: 'Sending cart data!'\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch(URL, {\n        method: 'PUT',\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        throw new Error('Sending cart data failed.');\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: 'success',\n        title: 'Success!',\n        message: 'Sent cart data successfully!'\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Sending cart data failed!'\n      }));\n    }\n  };\n};","map":{"version":3,"names":["uiActions","cartActions","URL","fetchCartData","dispatch","fetchData","response","fetch","ok","Error","data","json","cartData","replaceCart","items","totalQuantity","error","showNotification","status","title","message","sendCartData","cart","sendRequest","method","body","JSON","stringify"],"sources":["F:/Programming/github/react-practice/11-Redux/Deep01/src/store/cart-action.js"],"sourcesContent":["import { uiActions } from \"./ui-slice\";\r\nimport { cartActions } from \"./cart-slice\";\r\n\r\nconst URL = 'https://react-http-bc15f-default-rtdb.firebaseio.com/cart.json';\r\n\r\nexport const fetchCartData = () => {\r\n    return async (dispatch) => {\r\n        const fetchData = async () => {\r\n            const response = await fetch(URL);\r\n            if(!response.ok) {\r\n                throw new Error('Could not fetch cart data!');\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        };\r\n\r\n        try {\r\n            const cartData = await fetchData();\r\n            dispatch(cartActions.replaceCart({\r\n                items: cartData.items || [],\r\n                totalQuantity: cartData.totalQuantity,\r\n            }));\r\n        } catch(error) {\r\n            dispatch(\r\n                uiActions.showNotification({\r\n                    status: 'error',\r\n                    title: 'Error!',\r\n                    message: 'Sending cart data failed!',\r\n                })\r\n            );\r\n        }\r\n    };\r\n};\r\n\r\nexport const sendCartData = (cart) => {\r\n\r\n    \r\n  return async (dispatch) => {\r\n    dispatch(\r\n      uiActions.showNotification({\r\n        status: 'pending',\r\n        title: 'Sending...',\r\n        message: 'Sending cart data!',\r\n      })\r\n    );\r\n\r\n    const sendRequest = async () => {\r\n      const response = await fetch(\r\n        URL,\r\n        {\r\n          method: 'PUT',\r\n          body: JSON.stringify(cart),\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Sending cart data failed.');\r\n      }\r\n    };\r\n\r\n    try {\r\n      await sendRequest();\r\n\r\n      dispatch(\r\n        uiActions.showNotification({\r\n          status: 'success',\r\n          title: 'Success!',\r\n          message: 'Sent cart data successfully!',\r\n        })\r\n      );\r\n    } catch (error) {\r\n      dispatch(\r\n        uiActions.showNotification({\r\n          status: 'error',\r\n          title: 'Error!',\r\n          message: 'Sending cart data failed!',\r\n        })\r\n      );\r\n    }\r\n  };\r\n};\r\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;AACA,SAASC,WAAT,QAA4B,cAA5B;AAEA,MAAMC,GAAG,GAAG,gEAAZ;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;EAC/B,OAAO,MAAOC,QAAP,IAAoB;IACvB,MAAMC,SAAS,GAAG,YAAY;MAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,CAA5B;;MACA,IAAG,CAACI,QAAQ,CAACE,EAAb,EAAiB;QACb,MAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;MACH;;MAED,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;MAEA,OAAOD,IAAP;IACH,CATD;;IAWA,IAAI;MACA,MAAME,QAAQ,GAAG,MAAMP,SAAS,EAAhC;MACAD,QAAQ,CAACH,WAAW,CAACY,WAAZ,CAAwB;QAC7BC,KAAK,EAAEF,QAAQ,CAACE,KAAT,IAAkB,EADI;QAE7BC,aAAa,EAAEH,QAAQ,CAACG;MAFK,CAAxB,CAAD,CAAR;IAIH,CAND,CAME,OAAMC,KAAN,EAAa;MACXZ,QAAQ,CACJJ,SAAS,CAACiB,gBAAV,CAA2B;QACvBC,MAAM,EAAE,OADe;QAEvBC,KAAK,EAAE,QAFgB;QAGvBC,OAAO,EAAE;MAHc,CAA3B,CADI,CAAR;IAOH;EACJ,CA3BD;AA4BH,CA7BM;AA+BP,OAAO,MAAMC,YAAY,GAAIC,IAAD,IAAU;EAGpC,OAAO,MAAOlB,QAAP,IAAoB;IACzBA,QAAQ,CACNJ,SAAS,CAACiB,gBAAV,CAA2B;MACzBC,MAAM,EAAE,SADiB;MAEzBC,KAAK,EAAE,YAFkB;MAGzBC,OAAO,EAAE;IAHgB,CAA3B,CADM,CAAR;;IAQA,MAAMG,WAAW,GAAG,YAAY;MAC9B,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAC1BL,GAD0B,EAE1B;QACEsB,MAAM,EAAE,KADV;QAEEC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,IAAf;MAFR,CAF0B,CAA5B;;MAQA,IAAI,CAAChB,QAAQ,CAACE,EAAd,EAAkB;QAChB,MAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;MACD;IACF,CAZD;;IAcA,IAAI;MACF,MAAMc,WAAW,EAAjB;MAEAnB,QAAQ,CACNJ,SAAS,CAACiB,gBAAV,CAA2B;QACzBC,MAAM,EAAE,SADiB;QAEzBC,KAAK,EAAE,UAFkB;QAGzBC,OAAO,EAAE;MAHgB,CAA3B,CADM,CAAR;IAOD,CAVD,CAUE,OAAOJ,KAAP,EAAc;MACdZ,QAAQ,CACNJ,SAAS,CAACiB,gBAAV,CAA2B;QACzBC,MAAM,EAAE,OADiB;QAEzBC,KAAK,EAAE,QAFkB;QAGzBC,OAAO,EAAE;MAHgB,CAA3B,CADM,CAAR;IAOD;EACF,CA1CD;AA2CD,CA9CM"},"metadata":{},"sourceType":"module"}